import fs from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Transform raw data to CountyData structure
 */
function transformToCleanData(rawData) {
	return rawData.map((row) => {
		const parseNumber = (val) => {
			if (val === null || val === undefined || val === "") return 0;
			const parsed = parseFloat(val);
			return Number.isNaN(parsed) ? 0 : parsed;
		};

		return {
			FIPS: row.FIPS || "",
			name: row.County || "",
			state: row.State || "",
			population: parseNumber(row.Population),
			medianAge: parseNumber(row["age_Median Age"]),
			temperature: {
				avgTempF: parseNumber(row["temp_Avg Temperature (°F)"]),
				isEstimated: !!row.temp_Note,
			},
			votes: {
				totals: {
					democrat: parseNumber(row["Democrat Votes"]),
					republican: parseNumber(row["Republican Votes"]),
					total: parseNumber(row["Total Votes"]),
				},
				percentages: {
					democrat: parseNumber(row["Democrat %"]),
					republican: parseNumber(row["Republican %"]),
				},
				winner: row.Winner || "",
				isEstimated: !!row.Note,
			},
			housing: {
				medianHomeValue: parseNumber(row["housing_Median Home Value"]),
				percentNationalMedian: row["housing_% of National Median"]
					? parseNumber(row["housing_% of National Median"])
					: undefined,
				isEstimated: !!row.housing_Note,
			},
			rent: {
				medianRent: parseNumber(row["rent_Median Rent"]),
				sizes: {
					efficiency: parseNumber(row.rent_Efficiency),
					oneBR: parseNumber(row.rent_1BR),
					twoBR: parseNumber(row.rent_2BR),
					threeBR: parseNumber(row.rent_3BR),
					fourBR: parseNumber(row.rent_4BR),
				},
				isEstimated: !!row.rent_Note,
			},
		};
	});
}

/**
 * Generate data.ts file from final.json
 */
async function generateDataTs() {
	console.log("Generating data.ts from final.json...\n");

	const finalDir = path.join(__dirname, "..", "..", "data", "final");
	const srcDataDir = path.join(__dirname, "..", "..", "src", "data");
	const finalJsonPath = path.join(finalDir, "final.json");
	const outputPath = path.join(srcDataDir, "data.ts");

	// Read final.json
	console.log("Reading final.json...");
	const finalData = JSON.parse(fs.readFileSync(finalJsonPath, "utf8"));
	console.log(`Loaded ${finalData.length} counties`);

	// Transform to clean data structure
	console.log("\nTransforming data to CountyData structure...");
	const cleanData = transformToCleanData(finalData);

	// Generate the full TypeScript file
	const tsContent = `// Auto-generated from final.json
// Do not edit this file manually

import type { CountyData } from "./types";

export const counties: CountyData[] = ${JSON.stringify(cleanData, null, 2)};
`;

	// Ensure src/data directory exists
	if (!fs.existsSync(srcDataDir)) {
		fs.mkdirSync(srcDataDir, { recursive: true });
		console.log(`Created directory: ${srcDataDir}`);
	}

	// Write the file
	fs.writeFileSync(outputPath, tsContent);

	console.log(`\n✅ Generated data.ts:`);
	console.log(`   Path: ${outputPath}`);
	console.log(`   Counties: ${cleanData.length}`);
	console.log(`   Transformed to CountyData structure`);
}

const isMainModule = import.meta.url === `file:///${process.argv[1].replace(/\\/g, "/")}`;
if (isMainModule) {
	console.log("Script executed directly, running generateDataTs...\n");
	generateDataTs().catch((err) => {
		console.error("Error in generateDataTs:", err);
		process.exit(1);
	});
}

export { generateDataTs };
